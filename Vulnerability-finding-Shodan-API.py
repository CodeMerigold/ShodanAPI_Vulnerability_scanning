#Shodan API automation in Python for VULNERABILITY SCANNING

import csv
import shodan
import csv
import gzip
import json
from pathlib import Path
DEBUG = True 



# Configuration
API_KEY = 'Write_your_own_Api_key'
DEBUG = True

# Input files, assumes files are in a folder "<current directory>/input/"
INPUT_DIR = Path('input/')  # Operate in one folder
INPUT_FILE = INPUT_DIR / 'project2_input1.json.gz'
OUTPUT_DIR = Path('output/')
OUTPUT_DIR.mkdir(exist_ok=True)

def parse_shodan_data():
    """
    Method to parse Shodan data and generate output files with various metrics
    Read project2_input1.json.gz
    :returns none:
    """
    # TODO - read and parse INPUT_FILE
    # This is Example Code that should help you get the fields you need

    vuln_data = {}  

    with gzip.open(INPUT_FILE, 'rt', encoding='utf-8') as file:
        for line in file:
            try:
                banner = json.loads(line)  # Use json.loads to load JSON data from each line
                # Check if 'vulns' key exists in banner and it's not empty
                if 'vulns' in banner.keys() and banner['vulns']:
                    for vuln, hosts in banner['vulns'].items():
                        # Initialize the entry if it doesn't exist
                        if vuln not in vuln_data:
                            vuln_data[vuln] = {'num_hosts': 0, 'unique_ports': set()}

                        # Update values
                        vuln_data[vuln]['num_hosts'] += len(hosts)
                        vuln_data[vuln]['unique_ports'].update([str(banner['port'])])

            except Exception as e:
                print('ERROR: Hit unexpected value in Shodan data!')

    # Sort vuln_data alphabetically by CVE number
    sorted_vuln_data = sorted(vuln_data.items(), key=lambda x: x[0])

    # Display and save to CSV
    with open(OUTPUT_DIR / 'part7-1.csv', 'w', newline='') as csvfile:
        fieldnames = ['vuln', 'num_hosts', 'unique_ports']
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)

        # Write header
        writer.writeheader()

        # Write rows
        for vuln, data in sorted_vuln_data:
            writer.writerow({'vuln': vuln, 'num_hosts': data['num_hosts'], 'unique_ports': '/'.join(map(str, data['unique_ports']))})

            # Display on screen (optional)
            #print(f"Vuln: {vuln}, Num Hosts: {data['num_hosts']}, Unique Ports: {', '.join(map(str, data['unique_ports']))}")




########################################





def shodan_facet_search(shodan_api, search_query, n_results=5000, country_code='US', verbose=DEBUG):
    """
    Searches Shodan using the provided query.
    Returns facet (stats) data for http.title, port, vuln, and org.
    :param shodan_api: (shodan.Shodan()) shodan API object
    :param search_query: (string) search query to return results for
    :param n_results: (int) number of results for each characteristic, default is 100
    :param country_code: (str) country code, default 'US'
    :param verbose: (bool) turn on verbose debugging
    :returns shodan_data: (dictionary of lists) Shodan facet data for http.title,
    port, vuln, org, and domain.
    """
    # The list of facets we want output of
    FACETS = [
        ('http.title', n_results),
        ('port', n_results),
        ('vuln', n_results),
        ('org', n_results),
        ('domain', n_results)
    ]

    # Initialize return variable
    shodan_data = {
        'http.title': [],
        'port': [],
        'vuln': [],
        'org': [],
        'domain': []
    }

    try:
        # Add Country filter to query
        _query = f'{search_query} country:{country_code}'

        # Apply facets to the obtained results using the search method
        result = shodan_api.search(_query, facets=FACETS)

        # Print the entire API response for better understanding (optional)
        #if verbose:
            #print(json.dumps(result, indent=2))

        # Extract facet data
        for facet, count in FACETS:
            facet_data = result.get('facets', {}).get(facet, {})
            
            if isinstance(facet_data, list):
                # For the case where facet_data is a list
                shodan_data[facet] = [{'count': item['count'], 'value': item['value']} for item in facet_data]
            elif isinstance(facet_data, dict):
                # For the case where facet_data is a dictionary
                shodan_data[facet] = facet_data.get('data', [])
            else:
                shodan_data[facet] = []

            # Verbose output - optional to help with debugging
            #if verbose:
                #print(f"Facet: '{facet}': {shodan_data[facet]} \n")

        # Return facet data
        return shodan_data

    except Exception as e:
        print(f'Error: {e}')
        raise Exception

# Rest of the code remains the same...


#######################################

def shodan_facet_multiple(shodan_api, search_queries):
    """
    Searches shodan using the provided queries.
    Aggregates facet (stats) data for 'vuln', 'domain', and 'port'
    Writes to *.csv OUTPUT files
    :param shodan_api: (shodan.Shodan()) shodan API object
    :param search_queries: (list of strings) search queries to run
    :returns: (bool) True if no errors, False otherwise.
    """
    # Facet data to collect
    output_data = {
        'domain': {},
        'port': {},
        'vuln': {}
    }

    # Output directory
    OUTPUT_DIR = Path("output")
    OUTPUT_DIR.mkdir(exist_ok=True)

    for query in search_queries:
        try:
            # Run shodan_facet_search for each query
            result = shodan_facet_search(shodan_api, query)

            # Accumulate facet data
            for facet, data in result.items():
                if facet in output_data:
                    output_data[facet].update({item['value']: item['count'] for item in data})

        except Exception as e:
            print(f'Error for query {query}: {e}')

    # Write with the specified filenames to csv
    for facet, data in output_data.items():
        facet_name = {'vuln': '2', 'domain': '3', 'port': '4'}.get(facet)
        output_file = OUTPUT_DIR / f'part7-{facet_name}.csv'
        headers = [facet, 'num_hosts']
        # Case-insensitive sorting for domain names
        if facet == 'domain':
            output_temp = sorted(data.items(), key=lambda x: x[0].lower())
        else:
            output_temp = sorted(data.items())

        with open(output_file, 'w', newline='') as csvfile:
            cw = csv.writer(csvfile)
            cw.writerow(headers)
            for row in output_temp:
                cw.writerow(row)

    return True

#######################################


# Test your code
if __name__ == "__main__":
    # Initialize API object using your API KEY
    shodan_api = shodan.Shodan("Write_your_own_Api_key")

# Run part 7.1
# Required output files: part7-1.csv
    parse_shodan_data()


    # Run code for step 7.2
    # DO NOT CHANGE - Use this query
    query = f'hostname:umd.edu'
    
    # DO NOT CHANGE - Run search and get results
    results = shodan_facet_search(shodan_api, query, n_results=5000)




    # Run code for part 7.3
    # Required output files: part7-domain.csv, part7-port.csv, part7-vuln.csv
    # DO NOT CHANGE - Use these queries
    queries = ['hostname:umd.edu', 'hostname:umces.edu', 'hostname:umm.edu']
    # DO NOT CHANGE - Run search and get results
    shodan_facet_multiple(shodan_api, queries)
